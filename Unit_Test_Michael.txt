Add


move R1 5 			B1 05

move R2 10			B2 0A

add R1 R2 R3			11 23

interrupt 0 			C0 00

halt

R1 == 5
R2 == 10
R3 == 15

--------------------------------------------
And


move R1 5 			B1 05

move R2 10			B2 0A

and R1 R2 R3 			21 23

interrupt 0 			C0 00

halt

R1 == 5
R2 == 10
R3 == 0

--------------------------------------------
Divide


move R1 20			B1 14

move R2 5			B2 05

divide R1 R2 R3 		31 23

interrupt 0 			C0 00

halt

R1 == 20
R2 == 5
R3 == 4

--------------------------------------------
Halt


halt 				0x0

interrupt 0 			C0 00   This line does not execute CPU is stopped by halt

--------------------------------------------
Multiply


move R1 4			B1 04

move R2 5			B2 05

multiply R1 R2 R3 		41 23

interrupt 0 			C0 00

halt

R1 == 4
R2 == 5
R3 == 20

--------------------------------------------
Or


move R1 12			B1 04

move R2 8			B2 08

or R1 R2 R3 			61 23

interrupt 0 			C0 00

halt

R1 == 12
R2 == 8
R3 == C


--------------------------------------------
Subtract


move R1 25			B1 19

move R2 10			B2 0A

subtract R1 R2 R3 		51 23

interrupt 0 			C0 00

halt

R1 == 25
R2 == 10
R3 == 15

--------------------------------------------
Branch 0


move R1 5			B1 05

move R2 10			B2 0A

branchIfLess R1 R2 6		70 12 00 03

halt

move R5 12			B5 0C

interrupt 0 			C0 00

R1 == 5
R2 == 10
R5 == 12

--------------------------------------------
Branch 1


move R1 10				B1 0A

move R2 10				B2 0A

branchIfLessThanOrEqual R1 R2 6         71 12 00 03

halt

move R5 12				B5 0C

interrupt 0 				C0 00


halt

R1 == 5
R2 == 10
R5 == 12

--------------------------------------------
Branch 2


move R1 8			B1 08

move R2 10			B2 0A

branchIfEqual R1 R2 6		72 12 00 04

halt

move R5 12			B5 0C

interrupt 0 			C0 00

R1 == 8
R2 == 10
halt

--------------------------------------------
Branch 3


move R1 8			B1 08

move R2 10			B2 0A

branchIfNotEqual R1 R2 6	73 12 00 06

interrupt 1			C1 00

halt

move R5 12			B5 0C

interrupt 0 			C0 00

R1 == 8
R2 == 10
R5 == 12


--------------------------------------------
Branch 4


move R1 8			B1 08

move R2 10			B2 0A

branchIfGreater R1 R2 1		74 12 00 01

interrupt 1			C0 01

move R5 12			B5 0C

interrupt 0 			C0 00

halt

R1 == 8
R2 == 10
Prints out memory

--------------------------------------------
Branch 5


move R1 12				B1 0C

move R2 10				B2 0A

branchIfGreaterOrEqual R1 R2 6		75 12 00 06

interrupt 1				C0 01

move R5 12				B5 0C

interrupt 0 				C0 00

halt

R1 == 12
R2 == 10
R5 == 12

--------------------------------------------
Call


call 6				76 00 00 03

halt

interrupt 0 			C0 00

return				A0 00


print out registers
return
halt


--------------------------------------------
Jump


jump 6				77 00 00 06

halt

interrupt 0 			C0 00

halt


print out registers
return
halt


--------------------------------------------
Load


move R2 10			B2 0A

load R1 R2			81 2???

interrupt 0 			C0 00

halt


R1 = 10


--------------------------------------------
Store


move R2 10			B2 0A

store R1 R2			91 2???

interrupt 0 			C0 00

halt

R2 = 10


--------------------------------------------
Pop


move R1 10			B1 0A

push R1				  A1 10

pop R2				  A2 20

interrupt 0 			C0 00

halt

R1 = 10
R2 = 10

--------------------------------------------
Push


move R1 10			B1 0A

push R1				A1 10

pop R2				A2 20

interrupt 0 			C0 00

halt


R1 = 10
R2 = 10

--------------------------------------------
